buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}
apply plugin: 'org.spongepowered.mixin'

configurations {
    implementation.extendsFrom(shadow)
}

version = "1.19.2-0.0.5.4"
group = 'birsy.clinker'
archivesBaseName = 'clinker'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.08.28-1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'clinker'
            mods {
                clinker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'clinker'
            mods {
                clinker {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'clinker'
            mods {
                clinker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'clinker', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                clinker {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

project.ext.jomlVersion = "1.10.5"
shadowJar{
    configurations = [project.configurations.shadow]
    relocate 'org.joml', 'clinker.joml'
    mergeServiceFiles()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.3'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf('org.ode4j:core:0.4.0')
    shadow("org.joml:joml:1.10.5")
    implementation (jarJar("org.joml:joml:1.10.5"){
        jarJar.ranged(it, "[1.10.5,)")
    })
}


mixin {
    add sourceSets.main, 'mixins.clinker.refmap.json'
    config "clinker.mixins.json"
}

jarJar.enable()
reobf {
    jarJar{}
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "clinker",
                "Specification-Vendor"    : "cappin",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "birsy",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
